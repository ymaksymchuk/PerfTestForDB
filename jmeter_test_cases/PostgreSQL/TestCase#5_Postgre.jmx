<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="HOST" elementType="Argument">
            <stringProp name="Argument.name">HOST</stringProp>
            <stringProp name="Argument.value">${__P(host,10.10.0.35)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PORT" elementType="Argument">
            <stringProp name="Argument.name">PORT</stringProp>
            <stringProp name="Argument.value">${__P(port,5432)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DATABASE" elementType="Argument">
            <stringProp name="Argument.name">DATABASE</stringProp>
            <stringProp name="Argument.value">${__P(db,cmnbs)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER" elementType="Argument">
            <stringProp name="Argument.name">USER</stringProp>
            <stringProp name="Argument.value">${__P(user,cmnbs_usr)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PSWD" elementType="Argument">
            <stringProp name="Argument.name">PSWD</stringProp>
            <stringProp name="Argument.value">${__P(pswd,Welc0me!)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LOOPS" elementType="Argument">
            <stringProp name="Argument.name">LOOPS</stringProp>
            <stringProp name="Argument.value">${__P(loops,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RAMP_UP" elementType="Argument">
            <stringProp name="Argument.name">RAMP_UP</stringProp>
            <stringProp name="Argument.value">${__P(ramp_up,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USERS_COUNT" elementType="Argument">
            <stringProp name="Argument.name">USERS_COUNT</stringProp>
            <stringProp name="Argument.value">${__P(users_count,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USERS_COUNT_TC1" elementType="Argument">
            <stringProp name="Argument.name">USERS_COUNT_TC1</stringProp>
            <stringProp name="Argument.value">${__P(users_count_tc1,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USERS_COUNT_TC2" elementType="Argument">
            <stringProp name="Argument.name">USERS_COUNT_TC2</stringProp>
            <stringProp name="Argument.value">${__P(users_count_tc2,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USERS_COUNT_TC3" elementType="Argument">
            <stringProp name="Argument.name">USERS_COUNT_TC3</stringProp>
            <stringProp name="Argument.value">${__P(users_count_tc3,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USERS_COUNT_TC4" elementType="Argument">
            <stringProp name="Argument.name">USERS_COUNT_TC4</stringProp>
            <stringProp name="Argument.value">${__P(users_count_tc4,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TIME" elementType="Argument">
            <stringProp name="Argument.name">TIME</stringProp>
            <stringProp name="Argument.value">${__P(time,600)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RESULT_FOLDER" elementType="Argument">
            <stringProp name="Argument.name">RESULT_FOLDER</stringProp>
            <stringProp name="Argument.value">${__P(result_folder)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="POOL_SIZE_TC1" elementType="Argument">
            <stringProp name="Argument.name">POOL_SIZE_TC1</stringProp>
            <stringProp name="Argument.value">${__P(pool_size_tc1,20)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="POOL_SIZE_TC2" elementType="Argument">
            <stringProp name="Argument.name">POOL_SIZE_TC2</stringProp>
            <stringProp name="Argument.value">${__P(pool_size_tc2,20)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="POOL_SIZE_TC3" elementType="Argument">
            <stringProp name="Argument.name">POOL_SIZE_TC3</stringProp>
            <stringProp name="Argument.value">${__P(pool_size_tc3,50)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="POOL_SIZE_TC4" elementType="Argument">
            <stringProp name="Argument.name">POOL_SIZE_TC4</stringProp>
            <stringProp name="Argument.value">${__P(pool_size_tc4,50)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MAX_WAIT_CONNECTION" elementType="Argument">
            <stringProp name="Argument.name">MAX_WAIT_CONNECTION</stringProp>
            <stringProp name="Argument.value">${__P(connection_wait,10000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ThreadsStateOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Active Threads Over Time" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.BytesThroughputOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Bytes Throughput Over Time" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ConnectTimesOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Connect Times Over Time" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CompositeResultCollector guiclass="kg.apc.jmeter.vizualizers.CompositeGraphGui" testclass="kg.apc.jmeter.vizualizers.CompositeResultCollector" testname="jp@gc - Composite Graph" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
        <collectionProp name="COMPOSITE_CFG">
          <collectionProp name=""/>
          <collectionProp name=""/>
        </collectionProp>
      </kg.apc.jmeter.vizualizers.CompositeResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ResponseCodesPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Codes per Second" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.LatenciesOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Latencies Over Time" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ResponseTimesOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Times Over Time" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TimesVsThreadsGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Time vs Threads" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.HitsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Hits per Second" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ThroughputVsThreadsGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Transaction Throughput vs Threads" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TransactionsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Transactions per Second" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="RespTimeGraph.interval">1000</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">~/TEST_CASE_5/SimpleDataWriter.csv</stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="PostgreSQL_TesCase#1" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${USERS_COUNT_TC1}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1370729701000</longProp>
        <longProp name="ThreadGroup.end_time">1370729701000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${TIME}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">false</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">aid</stringProp>
          <stringProp name="dbUrl">jdbc:postgresql://${HOST}:${PORT}/${DATABASE}</stringProp>
          <stringProp name="driver">org.postgresql.Driver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Welc0me!</stringProp>
          <stringProp name="poolMax">${POOL_SIZE_TC1}</stringProp>
          <stringProp name="timeout">${MAX_WAIT_CONNECTION}</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">cmnbs_usr</stringProp>
          <boolProp name="preinit">true</boolProp>
          <stringProp name="initQuery"></stringProp>
          <stringProp name="connectionProperties"></stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="PostgreSQL_TesCase#1" enabled="true">
          <stringProp name="dataSource">aid</stringProp>
          <stringProp name="query">--Script Select only script:    
--scaling factor: 1000    

do $$
	declare p_aid int := round(random()*100000000); 
	declare p_abalance int;
begin
	SELECT abalance into p_abalance FROM pgbench_accounts WHERE aid = p_aid;
end
$$ language plpgsql;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryType">Prepared Update Statement</stringProp>
          <stringProp name="resultVariable">result</stringProp>
          <stringProp name="variableNames">aid</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="49586">200</stringProp>
          </collectionProp>
          <stringProp name="Assertion.custom_message"></stringProp>
          <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">8</intProp>
          <stringProp name="Assertion.scope">all</stringProp>
          <stringProp name="Scope.variable">Result</stringProp>
        </ResponseAssertion>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="PostgreSQL_TesCase#2" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${USERS_COUNT_TC2}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1370729701000</longProp>
        <longProp name="ThreadGroup.end_time">1370729701000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${TIME}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">aid</stringProp>
          <stringProp name="dbUrl">jdbc:postgresql://${HOST}:${PORT}/${DATABASE}</stringProp>
          <stringProp name="driver">org.postgresql.Driver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Welc0me!</stringProp>
          <stringProp name="poolMax">${POOL_SIZE_TC2}</stringProp>
          <stringProp name="timeout">${MAX_WAIT_CONNECTION}</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">cmnbs_usr</stringProp>
          <boolProp name="preinit">true</boolProp>
          <stringProp name="initQuery"></stringProp>
          <stringProp name="connectionProperties"></stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="PostgreSQL_TesCase#2" enabled="true">
          <stringProp name="dataSource">aid</stringProp>
          <stringProp name="query">---------------TEST Case #2

--Script, read-write:

  

do $$
	declare p_aid int := ceil(random()*100000000); 
	declare p_bid int := ceil(random()*1000); 
	declare p_tid int := ceil(random()*10000); 
	declare p_delta int := ceil(random()*10000)-5000; 
	declare p_abalance int;
begin
	-- body
	UPDATE pgbench_accounts SET abalance = abalance + p_delta WHERE aid = p_aid;
	SELECT abalance into p_abalance FROM pgbench_accounts WHERE aid = p_aid;
	UPDATE pgbench_tellers SET tbalance = tbalance + p_delta WHERE tid = p_tid;
	UPDATE pgbench_branches SET bbalance = bbalance + p_delta WHERE bid = p_bid;
	INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (p_tid, p_bid, p_aid, p_delta, CURRENT_TIMESTAMP);	

end
$$ language plpgsql;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryType">Prepared Update Statement</stringProp>
          <stringProp name="resultVariable">result</stringProp>
          <stringProp name="variableNames">aid</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="49586">200</stringProp>
          </collectionProp>
          <stringProp name="Assertion.custom_message"></stringProp>
          <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">8</intProp>
          <stringProp name="Assertion.scope">all</stringProp>
          <stringProp name="Scope.variable">Result</stringProp>
        </ResponseAssertion>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="PostgreSQL_TesCase#3" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${USERS_COUNT_TC3}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1370729701000</longProp>
        <longProp name="ThreadGroup.end_time">1370729701000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${TIME}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">aid</stringProp>
          <stringProp name="dbUrl">jdbc:postgresql://${HOST}:${PORT}/${DATABASE}</stringProp>
          <stringProp name="driver">org.postgresql.Driver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Welc0me!</stringProp>
          <stringProp name="poolMax">${POOL_SIZE_TC3}</stringProp>
          <stringProp name="timeout">${MAX_WAIT_CONNECTION}</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">cmnbs_usr</stringProp>
          <boolProp name="preinit">true</boolProp>
          <stringProp name="initQuery"></stringProp>
          <stringProp name="connectionProperties"></stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="PostgreSQL_TesCase#3" enabled="true">
          <stringProp name="dataSource">aid</stringProp>
          <stringProp name="query">--
DO $$
DECLARE 
	v_object character varying(240);
	v_CASE_TYPE_NAME character varying(50);
	v_OFFICE_ID NUMERIC(10,0);
	v_OFFICE_CODE character varying(50);
	v_CASE_ID NUMERIC(10,0);
	v_CLIENT_CODE character varying(20);
	v_CASE_FILE_NUMB character varying(20);
	v_CASE_FILE_ID NUMERIC (10,0);
	v_CLIENT_ID NUMERIC(10,0);
	v_who_has character varying(160) := &apos;Perf Test&apos;;
	v_USERID character varying(20) := &apos;6951&apos;;
	v_USERNAME character varying(160) := &apos;Perf Test&apos;;
	v_ACT_ID NUMERIC(10,0);
	v_OWNDATE timestamp := current_timestamp;
	v_STATE_ID NUMERIC(10,0) := NULL; 
	v_CASE_TYPE_ID NUMERIC(10,0) := 1;
	v_PROCESS_TYPE_ID NUMERIC(10,0) := NULL;  
	v_IS_ACTIVE BIT := 1;
	v_VAR1 NUMERIC(10,0);
	v_VAR2 NUMERIC(10,0);
	v_VAR3 character varying(260);--NUMERIC(10,0);
	v_VAR4 character varying(260);
	v_VAR5 character varying(260);
	v_VAR6 character varying(260);
	v_cf_id numeric(10);
	v_grp_id numeric(10);
	v_count numeric(10);
	v_old_date timestamp := current_timestamp;
	v_case character varying(260);
	v_IS_INCLUDE_SUB_ACTIVITIES	BIT 			:= 1;
	v_IS_INCLUDE_INACTIVE		BIT 			:= 1;
	v_COMMENT_ID numeric(10);
	v_StartTime timestamp with time zone;
	v_EndTime timestamp with time zone;
	v_diff numeric(10);
BEGIN
v_StartTime := clock_timestamp();
SELECT CASE_TYPE_NAME, OFFICE_ID, OFFICE_CODE 
into v_CASE_TYPE_NAME, v_OFFICE_ID, v_OFFICE_CODE
FROM public.TMP_CASE_TYPE__OFFICE_CODE 
order by RANDOM()
limit 1;

v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));
-- -- get random CASE_TYPE_NAME

-- --exec CMSWS_SP_SEARCH_CASES_USER_LOGIN @OFFICE_CODE=N&apos;AL&apos;,@CASE_FILE_NUMB=NULL,@ACTION_NUMB=NULL,@REF_SYS_NAME=NULL,@CASE_TYPE_NAME=N&apos;Foreclosure&apos;,@CASE_TMPL_STATE_CODE=NULL,@CASE_TMPL_NAME=NULL,@CASE_FILE_REF=NULL,@CLIENT_CODE=NULL,@CASE_FILE_AGENCY=NULL,@CASE_FILE_INVESTOR=NULL,@CASE_FILE_INVESTOR_NUM=NULL,@STATUS_NAME=N&apos;ACTIVE&apos;,@CASE_FILE_LOAN_NUMB=NULL,@CASE_COURT_NUMB=NULL,@CASE_OUTSOURCER_NUMB=NULL,@PROP_ADDRESS_1_LINE=NULL,@PROP_ADDRESS_2_LINE=NULL,@PROP_ADDRESS_CITY=NULL,@PROP_ADDRESS_STATE_CODE=NULL,@PROP_ADDRESS_ZIPCODE=NULL,@PROP_ADDRESS_COUNTY_NAME=NULL,@CASE_WHO_HAS=NULL,@CASE_FILE_RECEIVED=NULL,@SCHEDULED_MILESTONE_NAME=NULL,@SCHEDULED_MILESTONE_START_DATE=NULL,@SCHEDULED_MILESTONE_END_DATE=NULL,@COMPLETED_MILESTONE_NAME=NULL,@COMPLETED_MILESTONE_START_DATE=NULL,@COMPLETED_MILESTONE_END_DATE=NULL,@IS_ARCH=NULL,@TOP=200,@ISOFFSHOREUSER=0,@USER_LOGIN=N&apos;aruslyakov&apos;,@SUB_PROCESS_TEMPLATE_ID=NULL,@SUB_PROCESS_STATUS_NAME=NULL

v_StartTime := clock_timestamp();
SELECT 
	C.CASE_ID into v_CASE_ID
	FROM   
	public.CMS_CASE_FILE CF    
	LEFT OUTER JOIN public.CMS_CASE C  ON C.CASE_FILE_ID = CF.CASE_FILE_ID  
	LEFT OUTER JOIN public.CMS_CASE_TYPE CT  ON C.CASE_TYPE_ID = CT.CASE_TYPE_ID  
	LEFT OUTER JOIN public.CMS_CASE_TEMPLATE TMPL  ON C.CASE_TMPL_ID = TMPL.CASE_TMPL_ID  
	LEFT OUTER JOIN public.CMS_LOCATION LOC  ON LOC.LOCATION_ID = C.LOCATION_ID   
	LEFT OUTER JOIN public.CMS_CLIENT_HISTORY ch  ON ch.CASE_FILE_ID = cf.CASE_FILE_ID AND CH.CLIENT_HIST_CUR_CLIENT = &apos;true&apos; AND CH.CLIENT_ROLE_ID=1     
	LEFT OUTER JOIN public.CMS_CLIENT cli  ON cli.CLIENT_ID = ch.CLIENT_ID  
	LEFT OUTER JOIN public.CMS_OFFICE OFC ON CF.OFFICE_ID = OFC.OFFICE_ID
	LEFT OUTER JOIN public.CMS_ADDRESS ADR  ON CF.CASE_FILE_ID = ADR.CASE_FILE_ID  
	LEFT OUTER JOIN public.CMS_COUNTY CN  ON ADR.COUNTY_ID = CN.COUNTY_ID  
	LEFT OUTER JOIN public.CMS_STATE ST  ON ADR.STATE_ID = ST.STATE_ID
	LEFT OUTER JOIN public.CMS_STATE TMPLST  ON TMPL.STATE_ID = TMPLST.STATE_ID  
	LEFT OUTER JOIN public.CMS_CASE_STATUS cs  ON c.CASE_ID = cs.CASE_ID AND cs.CASE_STAT_CUR_STAT = &apos;true&apos; 
	LEFT OUTER JOIN public.CMS_STATUS_TYPE s ON cs.STATUS_ID = s.STATUS_ID
	LEFT OUTER JOIN public.CMS_REFERRING_SYSTEM REF  ON C.REF_SYS_ID=REF.REF_SYS_ID WHERE 1=1 
AND (coalesce(cli.SUPER_CODE_ID, -1) &lt;&gt; 3363 OR OFC.OFFICE_CODE NOT IN (&apos;AZ&apos;, &apos;GA&apos;, &apos;KS&apos;, &apos;LA&apos;, &apos;MO&apos;, &apos;OIK&apos;, &apos;TX&apos;, &apos;VA&apos;) AND cli.SUPER_CODE_ID = 3363) 
 AND OFC.OFFICE_CODE =v_OFFICE_CODE
 AND CT.CASE_TYPE_NAME =v_CASE_TYPE_NAME AND S.STATUS_NAME =&apos;ACTIVE&apos;
 limit 200;

v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));
-- --select @CASE_TYPE_NAME, @OFFICE_ID, @OFFICE_CODE 

 IF v_CASE_ID is not null THEN
	 --&gt; if empty finish TS else get Case_id from the firts row

	--exec CMSWS_SP_GET_CMS_CASE_INFO @CASE_ID=3212238  -- get CHE

v_StartTime := clock_timestamp();
		SELECT
			C.CASE_FILE_ID, 
			CF.CASE_FILE_NUMB, 
			C.CASE_NUMBER, 
			CF.CASE_FILE_REF,
			C.CASE_HOLDER_NAME,
			CLI.CLIENT_CODE
			INTO
			v_CASE_FILE_ID,
			v_CASE_FILE_NUMB,
			v_VAR4,
			v_VAR5,
			v_VAR6,
			v_CLIENT_CODE
		FROM
			public.CMS_CASE_FILE CF 
			INNER JOIN public.CMS_CASE C  ON C.CASE_FILE_ID=CF.CASE_FILE_ID
			LEFT OUTER JOIN public.CMS_LOAN_TYPE LT  ON CF.LOAN_TYPE_ID=LT.LOAN_TYPE_ID
			LEFT JOIN public.CMS_CASE_TYPE CT  ON CT.CASE_TYPE_ID=C.CASE_TYPE_ID
			LEFT JOIN public.CMS_CASE_STATUS CS  ON C.CASE_ID=CS.CASE_ID AND CS.CASE_STAT_CUR_STAT = &apos;true&apos;
			LEFT JOIN public.CMS_STATUS_TYPE ST  ON CS.STATUS_ID=ST.STATUS_ID
			LEFT OUTER JOIN public.CMS_DELAY_CODE DC  ON DC.DELAY_CODE_ID=CS.DELAY_CODE_ID
			LEFT JOIN public.CMS_CLIENT_HISTORY CH   ON CH.CASE_FILE_ID = CF.CASE_FILE_ID AND CH.CLIENT_ROLE_ID=1 AND CH.CLIENT_HIST_CUR_CLIENT = &apos;true&apos;
			LEFT JOIN public.CMS_CLIENT CLI  ON CLI.CLIENT_ID = CH.CLIENT_ID
			LEFT OUTER JOIN public.CMS_LEGAL_PORTION LP  ON CLI.LEGAL_PORTION_ID=LP.LEGAL_PORTION_ID
			LEFT OUTER JOIN public.CMS_REFERRING_SYSTEM REF  ON C.REF_SYS_ID=REF.REF_SYS_ID
			LEFT OUTER JOIN public.CMS_LOCATION LOC ON C.LOCATION_ID=LOC.LOCATION_ID
			LEFT OUTER JOIN public.CMS_ADDRESS CA_PROP  ON CF.CASE_FILE_ID = CA_PROP.CASE_FILE_ID AND CA_PROP.ADDR_TYPE_ID = 12
			LEFT OUTER JOIN public.CMS_COUNTY CO_PROP ON CA_PROP.COUNTY_ID = CO_PROP.COUNTY_ID
			LEFT OUTER JOIN public.CMS_OCCUPANCY OCC  ON C.OCCUPANCY_ID=OCC.OCCUPANCY_ID
			LEFT OUTER JOIN public.CMS_DELAY_CODE_SUB_TYPE DST  ON CS.DELAY_CODE_SUB_TYPE_ID=DST.DELAY_CODE_SUB_TYPE_ID
			LEFT OUTER JOIN public.CMS_CASE_TEMPLATE TMPL  ON C.CASE_TMPL_ID=TMPL.CASE_TMPL_ID
		WHERE
			C.CASE_ID = v_CASE_ID;

v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));

-- 	--get client_code, case_file_number, case_file_id
-- raise notice &apos;  --- v_CLIENT_CODE = %&apos;,  cast(v_CLIENT_CODE as character varying(20));
-- 	--exec CMSWS_SP_GET_CASE_FILE_INFO_BY_CASE_ID @CASE_ID=3212238

v_StartTime := clock_timestamp();
		SELECT
		CF.CASE_FILE_ID,
		CF.OFFICE_ID,
		OFC.OFFICE_CODE,
		CF.CASE_FILE_NUMB,
		CF.LOAN_TYPE_ID,
		LT.LOAN_TYPE_NAME
		into
		v_VAR1,
		v_VAR2,
		v_VAR3,
		v_VAR4,
		v_VAR5,
		v_VAR6
		FROM
		public.CMS_CASE C 
		INNER JOIN public.CMS_CASE_FILE CF  ON C.CASE_FILE_ID=CF.CASE_FILE_ID
		LEFT OUTER JOIN public.CMS_LOAN_TYPE LT  ON CF.LOAN_TYPE_ID=LT.LOAN_TYPE_ID
		INNER JOIN public.CMS_OFFICE OFC ON CF.OFFICE_ID=OFC.OFFICE_ID
		WHERE
		C.CASE_ID = v_CASE_ID;

v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));

 	-- exec CMSWS_SP_GET_CLIENT_INFO @CLIENT_CODE=N&apos;CHE&apos; -- get client_id
v_StartTime := clock_timestamp();
		IF (v_CLIENT_CODE IS NULL) THEN
			SELECT
				CLI.CLIENT_ID,
				CLI.CLIENT_NAME,
				CLI.CLIENT_CODE,
				CS.STATUS_NAME
				INTO
				v_CLIENT_ID,
				v_VAR4,
				v_VAR5,
				v_VAR6
			FROM public.CMS_CLIENT CLI 
			LEFT OUTER JOIN public.CMS_SUPER_CODE SC ON CLI.SUPER_CODE_ID=SC.SUPER_CODE_ID
			LEFT OUTER JOIN public.CMS_CLIENT_STATUS CS ON CLI.CL_STATUS_ID=CS.CL_STATUS_ID
			LEFT OUTER JOIN public.CMS_LEGAL_PORTION LP  ON CLI.LEGAL_PORTION_ID=LP.LEGAL_PORTION_ID
			LEFT OUTER JOIN public.CMS_BILLING_PORTION BP ON CLI.BILLING_PORTION_ID=BP.BILLING_PORTION_ID
			LEFT OUTER JOIN public.CMS_CLIENT_REFERRING_SYS CR ON CLI.CLIENT_REFERRING_SYS_ID=CR.REFERRING_SYS_ID;
		ELSE 
			SELECT
				CLI.CLIENT_ID,
				CLI.CLIENT_NAME,
				CLI.CLIENT_CODE,
				CS.STATUS_NAME
				INTO
				v_CLIENT_ID,
				v_VAR4,
				v_VAR5,
				v_VAR6
			FROM public.CMS_CLIENT CLI
			LEFT OUTER JOIN public.CMS_SUPER_CODE SC ON CLI.SUPER_CODE_ID=SC.SUPER_CODE_ID
			LEFT OUTER JOIN public.CMS_CLIENT_STATUS CS ON CLI.CL_STATUS_ID=CS.CL_STATUS_ID
			LEFT OUTER JOIN public.CMS_LEGAL_PORTION LP  ON CLI.LEGAL_PORTION_ID=LP.LEGAL_PORTION_ID
			LEFT OUTER JOIN public.CMS_BILLING_PORTION BP  ON CLI.BILLING_PORTION_ID=BP.BILLING_PORTION_ID
			LEFT OUTER JOIN public.CMS_CLIENT_REFERRING_SYS CR  ON CLI.CLIENT_REFERRING_SYS_ID=CR.REFERRING_SYS_ID
			WHERE CLI.CLIENT_CODE = v_CLIENT_CODE;
		END IF;

v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));
-- 	-- get Client_id

-- 	--exec CMSWS_SP_GET_CLIENT_FULL_INFO @CLIENT_ID=587

v_StartTime := clock_timestamp();
		SELECT
			CLIENT_ID, 
			CLIENT_CODE, 
			CL_STATUS_ID, 
			IR_ID
			into
			v_VAR1,
			v_VAR4,
			v_VAR2,
			v_VAR3
		FROM public.CMS_CLIENT CLI 
		WHERE CLI.CLIENT_ID = v_CLIENT_ID;

v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));
-- 	-- exec CMS_P_GET_CONTACT_FOR_CLIENT @CLIENT_ID=587


-- 		-- get contact for client
v_StartTime := clock_timestamp();
		SELECT cc.CLIENT_CONT_ID, cc.CLIENT_ID, cc.CLIENT_CONT_TYPE_ID, cct.CLIENT_CONT_TYPE_NAME,
				CONCAT(
					COALESCE(a.ADDRESS_1_LINE || &apos;, &apos;, &apos;&apos;), 
					COALESCE(a.ADDRESS_2_LINE || &apos;, &apos;, &apos;&apos;),
					COALESCE(a.ADDRESS_CITY || &apos;, &apos;, &apos;&apos;), 
					COALESCE(s.STATE_CODE || &apos;, &apos;, &apos;&apos;),
					COALESCE(a.ADDRESS_ZIPCODE, &apos;&apos;)
				)
				into
				v_VAR1,
				v_VAR2,
				v_VAR3,
				v_VAR5,
				v_VAR4
		FROM	public.CMS_CLIENT_CONTACT AS cc  
			INNER JOIN public.CMS_CLIENT_CONTACT_TYPE cct  ON cc.CLIENT_CONT_TYPE_ID = cct.CLIENT_CONT_TYPE_ID
			LEFT OUTER JOIN public.CMS_ADDRESS a  ON a.CLIENT_CONT_ID = cc.CLIENT_CONT_ID AND a.ADDRESS_IS_PRIM = &apos;true&apos;
			LEFT JOIN public.CMS_STATE s ON s.STATE_ID = a.STATE_ID
		WHERE   cc.CLIENT_ID = v_client_id
		limit 1;

v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));

-- 	--exec CMSWS_SP_GET_CMS_CASE_INFO_BY_CASENUMBER @OFFICE_CODE=N&apos;AL&apos;,@CASE_FILE_NUMB=N&apos;14-003582&apos;
v_StartTime := clock_timestamp();
		/* RETURNS A LIST OF ACTIONS FOR THE GIVEN OFFICE/CASE # */
		SELECT 
			C.CASE_ID, 
			C.CASE_FILE_ID, 
			CF.CASE_FILE_LOAN_NUMB, 
			CF.CASE_FILE_NUMB, 
			C.CASE_NUMBER
			INTO
			v_VAR1,
			v_VAR2,
			v_VAR4,
			v_VAR5,
			v_VAR6
		FROM
			public.CMS_CASE_FILE CF 
			INNER JOIN public.CMS_CASE C  ON C.CASE_FILE_ID=CF.CASE_FILE_ID
			LEFT OUTER JOIN public.CMS_LOAN_TYPE LT  ON CF.LOAN_TYPE_ID=LT.LOAN_TYPE_ID
			INNER JOIN public.CMS_CASE_TYPE CT  ON CT.CASE_TYPE_ID=C.CASE_TYPE_ID
			INNER JOIN public.CMS_CASE_STATUS CS  ON C.CASE_ID=CS.CASE_ID AND CS.CASE_STAT_CUR_STAT=&apos;true&apos;
			INNER JOIN public.CMS_STATUS_TYPE ST  ON CS.STATUS_ID=ST.STATUS_ID
			LEFT OUTER JOIN public.CMS_DELAY_CODE DC  ON DC.DELAY_CODE_ID=CS.DELAY_CODE_ID
			INNER JOIN public.CMS_CLIENT_HISTORY CH  ON CH.CASE_FILE_ID = CF.CASE_FILE_ID AND CH.CLIENT_ROLE_ID=1 AND CH.CLIENT_HIST_CUR_CLIENT=&apos;true&apos;
			INNER JOIN public.CMS_CLIENT CLI  ON CLI.CLIENT_ID = CH.CLIENT_ID
			LEFT OUTER JOIN public.CMS_REFERRING_SYSTEM REF  ON C.REF_SYS_ID=REF.REF_SYS_ID
			INNER JOIN public.CMS_OFFICE OFC  ON CF.OFFICE_ID=OFC.OFFICE_ID
			LEFT OUTER JOIN public.CMS_LOCATION LOC ON C.LOCATION_ID=LOC.LOCATION_ID
			LEFT OUTER JOIN public.CMS_ADDRESS CA_PROP ON CF.CASE_FILE_ID = CA_PROP.CASE_FILE_ID AND CA_PROP.ADDR_TYPE_ID = 12
			LEFT OUTER JOIN public.CMS_COUNTY CO_PROP ON CA_PROP.COUNTY_ID = CO_PROP.COUNTY_ID
			LEFT OUTER JOIN public.CMS_OCCUPANCY OCC  ON C.OCCUPANCY_ID=OCC.OCCUPANCY_ID
			LEFT OUTER JOIN public.CMS_DELAY_CODE_SUB_TYPE DST  ON CS.DELAY_CODE_SUB_TYPE_ID=DST.DELAY_CODE_SUB_TYPE_ID
			LEFT OUTER JOIN public.CMS_CASE_TEMPLATE TMPL  ON C.CASE_TMPL_ID=TMPL.CASE_TMPL_ID

		WHERE
			CF.CASE_FILE_NUMB = v_CASE_FILE_NUMB AND
			OFC.OFFICE_CODE = v_OFFICE_CODE
		limit 1;

v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));
		
-- 	--exec CMSWS_SP_GET_PROPERTY_ADDRESS @CASE_FILE_ID=2067753
v_StartTime := clock_timestamp();
		SELECT 
		ADRS.ADDRESS_ID,
		ADRS.ADDRESS_1_LINE,
		ADRS.ADDRESS_2_LINE
		into
		v_VAR1,
		v_VAR4,
		v_VAR5
		FROM
		public.CMS_ADDRESS ADRS 
		LEFT OUTER JOIN public.CMS_STATE ST  ON ADRS.STATE_ID=ST.STATE_ID
		LEFT OUTER JOIN public.CMS_COUNTY CNTY ON ADRS.COUNTY_ID=CNTY.COUNTY_ID
		LEFT OUTER JOIN public.CMS_COUNTRY CNTRY  ON ADRS.CNTR_ID=CNTRY.CNTR_ID
		WHERE
		ADRS.ADDR_TYPE_ID = 12 AND
		ADRS.CASE_FILE_ID = v_CASE_FILE_ID
		limit 1;

v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));

-- 	--exec CMSWS_SP_GET_ALERTS_ON_ACTION @CASE_ID=3212238
v_StartTime := clock_timestamp();	
		SELECT
		BP.BP_ID,
		BP.BP_NAME
		into
		v_VAR1,
		v_VAR4
		FROM
		public.CMS_BOILER_PLATE_LINK BPL 
		INNER JOIN public.CMS_BOILER_PLATE BP  ON BPL.BP_ID=BP.BP_ID
		WHERE
		BPL.CASE_ID = v_CASE_ID;
	
v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));

	-- exec CMS_P_GET_ACTION_CASE_ASSOCIATED @cf_id=2067753
	-- set case id
	v_cf_id := v_CASE_FILE_ID;

v_StartTime := clock_timestamp();
	SELECT CASE_FILE_GRP_ID into v_grp_id FROM public.CMS_CASE_FILE_ASSOCIATED 
		WHERE CASE_FILE_ID = v_cf_id;

v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));

v_StartTime := clock_timestamp();
	SELECT cfa.CFA_ID, 
			c.CASE_ID, 
			cf.CASE_FILE_ID,
			cf.CASE_FILE_NUMB, 
			c.CASE_NUMBER,
			cf.CASE_FILE_REF
			into
			v_VAR1,
			v_VAR2,
			v_VAR3,
			v_VAR4
			v_VAR5,
			v_VAR6
	FROM        
		public.CMS_CASE_FILE_ASSOCIATED AS cfa  INNER JOIN
	    public.CMS_CASE_FILE AS cf  ON cfa.CASE_FILE_ID = cf.CASE_FILE_ID INNER JOIN
		  public.CMS_CLIENT_HISTORY AS ch  ON cf.CASE_FILE_ID = ch.CASE_FILE_ID AND ch.CLIENT_HIST_CUR_CLIENT = &apos;true&apos; AND ch.CLIENT_ROLE_ID = 1 INNER JOIN
		  public.CMS_CLIENT AS cl  ON ch.CLIENT_ID = cl.CLIENT_ID LEFT OUTER JOIN 
		  public.CMS_CASE c  INNER JOIN
		  public.CMS_CASE_STATUS cs  INNER JOIN
		public.CMS_STATUS_TYPE st on cs.STATUS_ID = st.STATUS_ID
        	    				  ON c.CASE_ID = cs.CASE_ID AND cs.CASE_STAT_CUR_STAT = &apos;true&apos;
        	    			  ON cf.CASE_FILE_ID = c.CASE_FILE_ID 
	WHERE     cfa.CASE_FILE_GRP_ID = v_grp_id
	limit 1;

v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));


-- 	--exec CMSWS_SP_GET_ACTION_INFO_BY_CASE_ID @CASE_ID=3212238
v_StartTime := clock_timestamp();
		SELECT  
		C.CASE_ID,
		C.CASE_FILE_ID,
		C.CASE_NUMBER,
		C.CASE_TYPE_ID,
		CT.CASE_TYPE_NAME,
		LOC.LOCATION_NAME
		into
		v_VAR1,
		v_VAR2,
		v_VAR4,
		v_VAR3,
		v_VAR5,
		v_VAR6
		FROM public.CMS_CASE C 
		INNER JOIN public.CMS_CASE_FILE CF ON C.CASE_FILE_ID = CF.CASE_FILE_ID
		INNER JOIN public.CMS_OFFICE O  ON CF.OFFICE_ID = O.OFFICE_ID
		INNER JOIN public.CMS_CASE_TYPE CT  ON C.CASE_TYPE_ID=CT.CASE_TYPE_ID
		LEFT OUTER JOIN public.CMS_LOCATION LOC  ON C.LOCATION_ID=LOC.LOCATION_ID
		LEFT OUTER JOIN public.CMS_REFERRING_SYSTEM REF  ON C.REF_SYS_ID=REF.REF_SYS_ID
		LEFT OUTER JOIN public.CMS_OCCUPANCY OCC  ON C.OCCUPANCY_ID=OCC.OCCUPANCY_ID
		LEFT OUTER JOIN public.CMS_DWELLING_TYPE DT  ON C.DT_ID=DT.DT_ID
		LEFT OUTER JOIN public.CMS_MORTGAGE_LIEN_POSITION MLP ON C.MLP_ID=MLP.MLP_ID
		WHERE C.CASE_ID = v_CASE_ID
		limit 1;

v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));

	--exec CMS_P_MY_LAST_TEN_CASE_UPDATE @who_has=N&apos;Andriy Ruslyakov&apos;,@case_file_id=2067753,@case_id=3212238
		-- get case file number plus case number 
v_StartTime := clock_timestamp();
		SELECT (cf.CASE_FILE_NUMB || &apos; &apos; || c.CASE_NUMBER) 
		into v_case
		FROM 	public.CMS_CASE c
		INNER JOIN public.CMS_CASE_FILE cf 
			 ON c.CASE_FILE_ID = cf.CASE_FILE_ID
		WHERE     
			(c.CASE_ID = v_case_id);

v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));

v_StartTime := clock_timestamp();
		UPDATE public.CMS_MY_LAST_TEN_CASE 
		SET LOAD_DATE = current_date
		WHERE 
			CASE_WHO_HAS = v_who_has AND 
			CASE_FILE_NUMB = v_case;

v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));

		IF NOT FOUND THEN
	/*  If no record were update therefore is because it does not exist */    
		--IF (@@ROWCOUNT = 0)
				-- get  counting Case and last oldening loading date
v_StartTime := clock_timestamp();
         		SELECT COUNT(CASE_ID), min(LOAD_DATE) 
				INTO
				V_count,
				v_old_date
				FROM public.CMS_MY_LAST_TEN_CASE 
     			WHERE CASE_WHO_HAS = v_who_has;

				-- deleting last oldening loading date if count &gt; 10
				IF v_count &gt;= 10 THEN
					DELETE FROM public.CMS_MY_LAST_TEN_CASE 
					WHERE 
						CASE_WHO_HAS = v_who_has AND 
						LOAD_DATE = v_old_date;
				END IF;
				-- inserting loading Case
				INSERT INTO public.CMS_MY_LAST_TEN_CASE (CASE_ID, CASE_FILE_ID, CASE_FILE_NUMB, CASE_WHO_HAS, LOAD_DATE) 
				VALUES (v_case_id, v_case_file_id, v_case, v_who_has, current_date);
v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));
			END IF;

	--exec CMSWS_SP_GET_PROPERTY_ADDRESS @CASE_FILE_ID=2067753
v_StartTime := clock_timestamp();
		SELECT  
		ADRS.ADDRESS_ID,
		ADRS.ADDRESS_1_LINE,
		ADRS.ADDRESS_2_LINE,
		CNTRY.CNTR_NAME
		INTO
		v_VAR1,
		v_VAR4,
		v_VAR5,
		v_VAR6
		FROM
		public.CMS_ADDRESS ADRS 
		LEFT OUTER JOIN public.CMS_STATE ST  ON ADRS.STATE_ID=ST.STATE_ID
		LEFT OUTER JOIN public.CMS_COUNTY CNTY  ON ADRS.COUNTY_ID=CNTY.COUNTY_ID
		LEFT OUTER JOIN public.CMS_COUNTRY CNTRY  ON ADRS.CNTR_ID=CNTRY.CNTR_ID
		WHERE
		ADRS.ADDR_TYPE_ID=12 AND
		ADRS.CASE_FILE_ID = v_CASE_FILE_ID
		LIMIT 1;

v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));
	
-- 	--exec CMSWS_SP_GET_CMS_CASE_INFO @CASE_ID=3212238

	--exec CMSWS_SP_GET_CMS_ACTIVITIES_BY_CASE_ID @CASE_ID=3212238,@IS_INCLUDE_SUB_ACTIVITIES=1,@IS_INCLUDE_INACTIVE=1
v_StartTime := clock_timestamp();
	SELECT 
			a.ACT_ID,
			a.CASE_ID,
			a.ACT_NAME,
			SPT.SUB_PROCESS_TEMPLATE_NAME
			into 
			v_ACT_ID,
			v_VAR1,
			v_VAR4,
			v_VAR5
		FROM public.CMS_ACTIVITY a 
			INNER JOIN public.CMS_ACTIVITY_TEMPLATE atmpl ON a.ACT_TMPL_ID = atmpl.ACT_TMPL_ID
			INNER JOIN public.CMS_MS_TEMPLATE_NEW m ON atmpl.MS_ID = m.MS_ID
			LEFT JOIN public.CMS_CASE_SUB_PROCESS  sp ON sp.CASE_SUB_PROCESS_ID = a.CASE_SUB_PROCESS_ID
			LEFT JOIN public.CMS_SUBPROCESS_TEMPLATE SPT  ON sp.SUB_PROCESS_TEMPLATE_ID = SPT.SUB_PROCESS_TEMPLATE_ID
		WHERE
			a.CASE_ID = v_CASE_ID
			AND ((v_IS_INCLUDE_SUB_ACTIVITIES = 1::bit AND (v_IS_INCLUDE_INACTIVE=1::bit OR (sp.CASE_SUB_PROCESS_ID IS NULL ))) OR (sp.CASE_SUB_PROCESS_ID IS NULL))
			AND a.ACT_CMPL_DATE is NULL
		ORDER BY m.MS_SEQ_NUM
		limit 1;

v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));
-- 	-- get activity id

	--exec CMSWS_SP_UPDATE_MILESTONE_NEW @USERID=N&apos;6951&apos;,@USERNAME=N&apos;Andriy Ruslyakov&apos;,@CASE_ID=3212238,@SCHDL_CMPL_FLAG=1,@MILESTONE_TYPE_NAME=N&apos;Sale Bid Rcvd&apos;,@MILESTONE_DATE=N&apos;02/18/2020&apos;,@CLIENT_UPLOAD_ATTEMPT_DATE=NULL,@CLIENT_UPLOAD_SUCCESSFUL=NULL,@CLIENT_UPLOAD_COMPLETED_BY=NULL,@ACT_ID=66831625
v_StartTime := clock_timestamp();
				UPDATE public.CMS_ACTIVITY
					SET ACT_CMPL_DATE = v_OWNDATE,
						ACT_CMPL_BY = v_USERNAME
				WHERE ACT_ID = v_act_id;

			UPDATE public.CMS_ACTIVITY
				SET ACT_COUNTER = ACT_COUNTER+1,
					ACT_CHNG_FLAG = &apos;true&apos;,
					ACT_SCHDL_DATE = v_OWNDATE
				WHERE ACT_ID = v_act_id;

v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));

v_StartTime := clock_timestamp();
		select nextval(&apos;public.sq_comment_serial&apos;) into v_COMMENT_ID;
		INSERT INTO public.CMS_COMMENT(COMMENT_ID, CMNT_TYPE_ID,CASE_ID,COMMENT_TEXT,COMMENT_USR_ID,COMMENT_USR_NAME,COMMENT_DATE,CASE_SUB_PROCESS_ID) 
		  VALUES(v_COMMENT_ID, 6,v_CASE_ID,&apos;@COMMENTTEXT&apos;,v_USERID,v_USERNAME,current_timestamp,1);

v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));

	-- run twice for next activity
v_StartTime := clock_timestamp();
			SELECT 
			a.ACT_ID,
			a.CASE_ID,
			a.ACT_NAME,
			SPT.SUB_PROCESS_TEMPLATE_NAME
			into
			v_ACT_ID,
			v_VAR1,
			v_VAR4,
			v_VAR5
		FROM public.CMS_ACTIVITY a 
			INNER JOIN public.CMS_ACTIVITY_TEMPLATE atmpl  ON a.ACT_TMPL_ID = atmpl.ACT_TMPL_ID
			INNER JOIN public.CMS_MS_TEMPLATE_NEW m  ON atmpl.MS_ID = m.MS_ID
			LEFT JOIN public.CMS_CASE_SUB_PROCESS  sp ON sp.CASE_SUB_PROCESS_ID = a.CASE_SUB_PROCESS_ID
			LEFT JOIN public.CMS_SUBPROCESS_TEMPLATE SPT  ON sp.SUB_PROCESS_TEMPLATE_ID = SPT.SUB_PROCESS_TEMPLATE_ID
		WHERE
			a.CASE_ID = v_CASE_ID
			AND ((v_IS_INCLUDE_SUB_ACTIVITIES=1::bit AND (v_IS_INCLUDE_INACTIVE=1::bit OR (sp.CASE_SUB_PROCESS_ID IS NULL ))) OR (sp.CASE_SUB_PROCESS_ID IS NULL))
			AND a.ACT_CMPL_DATE is NULL
		ORDER BY m.MS_SEQ_NUM
		limit 1;

v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));
-- 	-- get activity id

	--exec CMSWS_SP_UPDATE_MILESTONE_NEW @USERID=N&apos;6951&apos;,@USERNAME=N&apos;Andriy Ruslyakov&apos;,@CASE_ID=3212238,@SCHDL_CMPL_FLAG=1,@MILESTONE_TYPE_NAME=N&apos;Sale Bid Rcvd&apos;,@MILESTONE_DATE=N&apos;02/18/2020&apos;,@CLIENT_UPLOAD_ATTEMPT_DATE=NULL,@CLIENT_UPLOAD_SUCCESSFUL=NULL,@CLIENT_UPLOAD_COMPLETED_BY=NULL,@ACT_ID=66831625
v_StartTime := clock_timestamp();
			UPDATE public.CMS_ACTIVITY
					SET ACT_CMPL_DATE = v_OWNDATE,
						ACT_CMPL_BY = v_USERNAME
				WHERE ACT_ID = v_act_id;

			UPDATE public.CMS_ACTIVITY
				SET ACT_COUNTER = ACT_COUNTER+1,
					ACT_CHNG_FLAG = &apos;true&apos;,
					ACT_SCHDL_DATE = v_OWNDATE
				WHERE ACT_ID = v_act_id;

v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));

v_StartTime := clock_timestamp();
		select nextval(&apos;public.sq_comment_serial&apos;) into v_COMMENT_ID;
		INSERT INTO public.CMS_COMMENT(COMMENT_ID, CMNT_TYPE_ID,CASE_ID,COMMENT_TEXT,COMMENT_USR_ID,COMMENT_USR_NAME,COMMENT_DATE,CASE_SUB_PROCESS_ID) 
		  VALUES(v_COMMENT_ID, 6,v_CASE_ID,&apos;@COMMENTTEXT&apos;,v_USERID,v_USERNAME,current_timestamp,1);

v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));

ELSE
	raise notice &apos;V_CASE_ID is null&apos;;
END IF;
END$$</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryType">Prepared Update Statement</stringProp>
          <stringProp name="resultVariable">result</stringProp>
          <stringProp name="variableNames">aid</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="49586">200</stringProp>
          </collectionProp>
          <stringProp name="Assertion.custom_message"></stringProp>
          <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">8</intProp>
          <stringProp name="Assertion.scope">all</stringProp>
          <stringProp name="Scope.variable">Result</stringProp>
        </ResponseAssertion>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="PostgreSQL_TesCase#4" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${USERS_COUNT_TC4}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1370729701000</longProp>
        <longProp name="ThreadGroup.end_time">1370729701000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${TIME}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">aid</stringProp>
          <stringProp name="dbUrl">jdbc:postgresql://${HOST}:${PORT}/${DATABASE}</stringProp>
          <stringProp name="driver">org.postgresql.Driver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Welc0me!</stringProp>
          <stringProp name="poolMax">${POOL_SIZE_TC4}</stringProp>
          <stringProp name="timeout">${MAX_WAIT_CONNECTION}</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">cmnbs_usr</stringProp>
          <boolProp name="preinit">true</boolProp>
          <stringProp name="initQuery"></stringProp>
          <stringProp name="connectionProperties"></stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="PostgreSQL_TesCase#4" enabled="true">
          <stringProp name="dataSource">aid</stringProp>
          <stringProp name="query">DO $$
DECLARE 
	v_CASE_FILE_ID NUMERIC(10) := 1073989;		
	v_CASE_TYPE_ID NUMERIC(10);
	v_CASE_TYPE_NAME character varying(160) := &apos;Foreclosure&apos;;
	v_CASE_TYPE_CODE character varying(160);
	v_MSG character varying(10485760);
	v_LOCATION_NAME character varying(240) := &apos;Boca&apos;;
	v_LOCATION_ID NUMERIC(10);
	v_BK_CHAPTER_NUM NUMERIC(10);
	v_BK_CHAPTER_ID NUMERIC(10);
	v_CASE_NUMBER character varying(20) := &apos;FC02&apos;;
	v_CASE_TMPL_ID NUMERIC(10) := 2313;
	v_CASE_FILE_RECEIVED character varying(20) := &apos;02/18/2020&apos;;
	v_CASE_STARTED character varying(20) := &apos;02/18/2020&apos;;
	v_CASE_WHO_HAS character varying(160) = N&apos;Andriy Ruslyakov&apos;;
	v_CASE_ID NUMERIC(10);-- = 1434057,
	v_CASE_ID_VAR NUMERIC(10);
	v_USERID NUMERIC(10) := &apos;6951&apos;;
	v_USERNAME character varying(40) := &apos;Andriy Ruslyakov&apos;;
	v_BK_ID NUMERIC(10);
	v_QUOTE_ID NUMERIC(10);
	v_CASE_STAT_ID NUMERIC(10);
	v_ACT_ID NUMERIC(10);
	v_UTC timestamp;
	v_COMMENT_ID NUMERIC(10);
	v_D_OCCUPANCY boolean := &apos;false&apos;;
	v_D_NOTICE_SENT_STAT boolean := &apos;false&apos;;
	v_DEFICIENCY_REASON_NAME character varying(240);
	v_APPEARANCE_TYPE_NAME character varying(240);
	v_CONSENT_TYPE_NAME character varying(240);
	v_DEFICIENCY_REASON_ID NUMERIC(10);
	v_APPEARANCE_TYPE_ID NUMERIC(10);
	v_CONSENT_TYPE_ID NUMERIC(10);
	v_CONT_TYPE_ID NUMERIC(10);
	v_CONT_TYPE_CASE_FILE boolean;
	v_COMP_FIELD_SNGL character varying(240);
	v_CONT_TYPE_NAME character varying(240) := &apos;Title Company&apos;;
	v_CONTACT_ID NUMERIC(10) := 4276114;
	v_ACTOR_ID NUMERIC(10);
	v_D_DEFICIENCY_PRESERVED boolean;
	v_D_DEFICIENCY_SOUGHT boolean;
	v_D_SERVICE_CODE character varying(240) := NULL;
	v_D_APPEAR_DATE timestamp without time zone;
	v_D_CONSENT_REQUESTED timestamp without time zone;
	v_D_CONSENT_RECEIVED timestamp without time zone;
	v_D_DEFAULT_NOTICE_SENT timestamp without time zone;
	v_D_DEFAULT_EXPIRED timestamp without time zone;
	v_D_DEFAULT_ORDERED timestamp without time zone; 
	v_D_ORDER_SENT timestamp without time zone;
	v_D_COURT_FILE_CHECK timestamp without time zone;
	v_D_DEFAULT_ORD_ENT timestamp without time zone;
	v_D_DUE_DILIGENCE_AFF_NEEDED boolean;
	v_D_DUE_DILIGENCE_AFF_RECEIVED timestamp without time zone;
	v_D_DUE_DILIGENCE_AFF_FILED timestamp without time zone;
	v_D_SEQ_NUMB NUMERIC(10) := 1;
	v_D_PLEADING_DATE timestamp without time zone;
	v_STATE_ID NUMERIC(10); 
	v_COUNTY_NAME character varying(240) := &apos;Washington&apos;; 
	v_COUNTY_ID NUMERIC(10);
	v_STATE_CODE character varying(20) := &apos;FL&apos;;
	v_CNTR_ID numeric(10);
	v_COUNTRY_NAME character varying(240) := &apos;United States&apos;;
	v_ADDRESS_1_LINE character varying(240) := &apos;Main street 1&apos;; 
	v_ADDRESS_2_LINE character varying(240);
	v_ADDRESS_TEXT character varying(240);
	v_ADDRESS_LINE_ATTN character varying(240);
	v_ADDRESS_CITY character varying(240) := &apos;Schdy&apos;;
	v_ADDRESS_ZIPCODE character varying(240) := &apos;12345&apos;;
	v_ADDRESS_IS_PRIM boolean := &apos;false&apos;;
	v_ADDRESS_ID numeric(10);
	v_StartTime timestamp with time zone;
	v_EndTime timestamp with time zone;
	v_diff numeric(10);
BEGIN
-- set initial param values
v_StartTime := clock_timestamp();
SELECT CASE_FILE_ID into v_CASE_FILE_ID FROM public.CMS_case_file 
order by RANDOM()
limit 1;

v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));

raise notice &apos;v_CASE_FILE_ID = %&apos;,  cast(v_CASE_FILE_ID as character varying(20));

v_StartTime := clock_timestamp();
select CASE_TYPE_NAME into v_CASE_TYPE_NAME from public.CMS_CASE_TYPE
order by RANDOM()
limit 1;

v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));
raise notice &apos;v_CASE_TYPE_NAME = %&apos;,  v_CASE_TYPE_NAME;

-- CMSWFWS_SP_CREATE_CASE_ACTION
v_StartTime := clock_timestamp();
SELECT CASE_TYPE_ID,
		CASE_TYPE_CODE 
INTO v_CASE_TYPE_ID, v_CASE_TYPE_CODE
FROM public.CMS_CASE_TYPE 
WHERE CASE_TYPE_NAME = v_CASE_TYPE_NAME;

v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));

v_StartTime := clock_timestamp();
SELECT CASE_TMPL_ID into v_CASE_TMPL_ID FROM public.CMS_CASE_TEMPLATE
where CASE_TYPE_ID = v_CASE_TYPE_ID
order by RANDOM()
limit 1;

v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));

raise notice &apos;v_CASE_TMPL_ID = %&apos;,  cast(v_CASE_TMPL_ID as character varying(20));

		-- determine the next case number (e.g. FC01, MON10)
		-- start with the next # for that action type
		v_StartTime := clock_timestamp();
		SELECT CAST(COUNT(1)+1 AS VARCHAR(3)) INTO v_CASE_NUMBER FROM public.CMS_CASE_FILE CF
		JOIN public.CMS_CASE C ON CF.CASE_FILE_ID=C.CASE_FILE_ID
		WHERE CF.CASE_FILE_ID = v_CASE_FILE_ID AND C.CASE_TYPE_ID = v_CASE_TYPE_ID;
		
		v_EndTime := clock_timestamp();
		select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
		raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));

		-- pad left 0 for # under 10 (eg 01, 02)
		IF LENGTH(v_CASE_NUMBER) = 1 THEN
			v_CASE_NUMBER = &apos;0&apos; || v_CASE_NUMBER;
		END IF;
		-- and prefix with the type (eg fc, bk)
		v_CASE_NUMBER := v_CASE_TYPE_CODE || v_CASE_NUMBER;

		raise notice &apos;v_CASE_NUMBER = %&apos;,  cast(v_CASE_NUMBER as character varying(20));

		-- CREATE THE ACTION AND GET ITS ID FOR OTHER INSERTS/AUDIT
		v_StartTime := clock_timestamp();
		SELECT nextval(&apos;sq_case_serial&apos;) into v_CASE_ID;
		INSERT INTO public.CMS_CASE
		(	CASE_ID,
			CASE_FILE_ID,
			CASE_TYPE_ID,
			LOCATION_ID,
			BK_CHAPTER_ID,
			CASE_TMPL_ID,
			CASE_FILE_RECEIVED,
			CASE_STARTED,
			CASE_WHO_HAS,
			CASE_NUMBER
			--CORE_PROCESS_NAME
		)
		VALUES
		(	v_CASE_ID,
			v_CASE_FILE_ID,
			v_CASE_TYPE_ID,
			v_LOCATION_ID,
			v_BK_CHAPTER_ID,
			v_CASE_TMPL_ID,
			v_CASE_FILE_RECEIVED::timestamp without time zone,
			v_CASE_STARTED::timestamp without time zone,
			v_CASE_WHO_HAS,
			v_CASE_NUMBER
			--@CORE_PROCESS_NAME
		);
	
	v_EndTime := clock_timestamp();
	select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
	raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));

	raise notice &apos;v_CASE_ID = %&apos;,  cast(v_CASE_ID as character varying(20));
	
	v_StartTime := clock_timestamp();
	SELECT nextval(&apos;public.sq_case_status_serial&apos;) into v_CASE_STAT_ID;
	INSERT INTO public.CMS_CASE_STATUS (CASE_STAT_ID, STATUS_ID, CASE_ID, CASE_STAT_USR_ID, CASE_STAT_USR_NAME)
	VALUES (v_CASE_STAT_ID, 1, v_CASE_ID, v_USERID, v_USERNAME);
	raise notice &apos;CASE STATUS inserted: %&apos;,  cast(v_CASE_STAT_ID as character varying(20));

v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));

		-- CREATE THE BK ROW AND AUDIT THAT
v_StartTime := clock_timestamp();
	SELECT nextval(&apos;public.sq_bankruptcy_serial&apos;) into v_BK_ID;
	INSERT INTO public.CMS_BANKRUPTCY (BK_ID, CASE_ID) VALUES (v_BK_ID, v_CASE_ID);
	raise notice &apos;BANKRUPTCY inserted: %&apos;,  cast(v_BK_ID as character varying(20));

v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));

v_StartTime := clock_timestamp();
	SELECT nextval(&apos;public.sq_quote_serial&apos;) into v_QUOTE_ID;
	INSERT INTO public.CMS_QUOTE (QUOTE_ID, CASE_ID, QUOTE_TYPE_ID, QUOTE_IS_TAGGED) VALUES (v_QUOTE_ID, v_CASE_ID, 8, true);
	raise notice &apos;QUOTE inserted: %&apos;,  cast(v_QUOTE_ID as character varying(20));

v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));

v_StartTime := clock_timestamp();
	INSERT INTO public.CMS_ACTIVITY (
		ACT_ID,
		CASE_ID,
		ACT_NAME,
		ACT_ACTIV_ID,
		ACT_SEQ,
		ACT_TMPL_ID,
		USER_GROUP_ID
	)
    SELECT 	nextval(&apos;public.sq_activity_serial&apos;), --v_ACT_ID,
			v_case_id,
			a.BF_ACTIVITY_NAME,
            a.BF_ACT_ID,
			a.ACT_TMPL_SEQ_NUM,
			a.ACT_TMPL_ID,
			mtn.USER_GROUP_ID
    FROM public.CMS_ACTIVITY_TEMPLATE a 
		JOIN public.CMS_MS_TEMPLATE_NEW mtn ON a.MS_ID = mtn.MS_ID
    WHERE a.CASE_TMPL_ID = v_case_tmpl_id 
    ORDER BY a.ACT_TMPL_SEQ_NUM asc;
	
v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));

	SELECT currval(&apos;public.sq_activity_serial&apos;) into v_ACT_ID;
	raise notice &apos;ACTIVITY inserted: %&apos;,  cast(v_ACT_ID as character varying(20));

v_StartTime := clock_timestamp();
	SELECT c.CASE_FILE_RECEIVED,
        	c.CASE_TMPL_ID
		into v_case_file_received, v_case_tmpl_id
    FROM public.CMS_CASE c
    WHERE c.CASE_ID = v_case_id;

v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));

v_StartTime := clock_timestamp();
	select current_timestamp at time zone &apos;utc&apos; into v_UTC;
	select nextval(&apos;public.sq_comment_serial&apos;) into v_COMMENT_ID;
	INSERT INTO public.CMS_COMMENT(COMMENT_ID, CMNT_TYPE_ID,CASE_ID,COMMENT_TEXT,COMMENT_USR_ID,COMMENT_USR_NAME,COMMENT_DATE) 
      VALUES(v_COMMENT_ID,6,v_CASE_ID,&apos;Comment&apos;,v_USERID,v_USERNAME,v_UTC);
	raise notice &apos;COMMENT inserted: %&apos;,  cast(v_COMMENT_ID as character varying(20));

v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));

	--raise notice &apos;v_case_file_received %&apos;,  v_case_file_received;
	--raise notice &apos;v_case_file_received %&apos;,  to_date(v_case_file_received, &apos;YYYY-MM-DD&apos;);

v_StartTime := clock_timestamp();
	UPDATE public.CMS_ACTIVITY
    SET ACT_SCHDL_DATE = coalesce(to_date(v_case_file_received, &apos;YYYY-MM-DD&apos;), to_date(current_timestamp::text, &apos;YYYY-MM-DD&apos;))
    WHERE CASE_ID = v_case_id AND ACT_ACTIV_ID = &apos;000&apos;;

v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));

-- CMSWS_SP_INSERT_DEFENDANT_NEW
v_StartTime := clock_timestamp();
		SELECT DEFICIENCY_REASON_ID into v_DEFICIENCY_REASON_ID FROM public.CMS_DEFENDANT_DEFICIENCY_REASON 
			WHERE DEFICIENCY_REASON_NAME = v_DEFICIENCY_REASON_NAME;

		SELECT APPEARANCE_TYPE_ID into v_APPEARANCE_TYPE_ID FROM public.CMS_DEFENDANT_APPEARANCE_TYPE 
			WHERE APPEARANCE_TYPE_NAME = v_APPEARANCE_TYPE_NAME;

		SELECT CONSENT_TYPE_ID into v_CONSENT_TYPE_ID FROM public.CMS_DEFENDANT_CONSENT_TYPE
			WHERE CONSENT_TYPE_NAME = v_CONSENT_TYPE_NAME;

v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));

		--SET @TEMP_CONTACT_ID = @CONTACT_ID
v_StartTime := clock_timestamp();		
		SELECT CT.CONT_TYPE_ID, 
				CT.CONT_TYPE_CASE_FILE,
				CMPLX.COMP_FIELD_SNGL 
			into v_CONT_TYPE_ID, v_CONT_TYPE_CASE_FILE, v_COMP_FIELD_SNGL
			FROM public.CMS_CONTACT_TYPE CT 
				LEFT OUTER JOIN public.CMS_COMPLEX_FIELD CMPLX ON CT.CONT_TYPE_ID=CMPLX.CONT_TYPE_ID
			WHERE CONT_TYPE_NAME = v_CONT_TYPE_NAME;

v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));

		-- ACTOR DOES NOT GET CASE ID ENTERED FOR CASE FILE LEVEL CONTACTS
		IF v_CONT_TYPE_CASE_FILE then
			v_CASE_ID_VAR := v_CASE_ID;
		END IF;
 
		IF EXISTS (SELECT 1 FROM public.CMS_ACTOR  WHERE CASE_ID = V_CASE_ID AND CONTACT_ID = V_CONTACT_ID 
			AND CASE_FILE_ID = V_CASE_FILE_ID) THEN
				 delete from public.CMS_ACTOR  WHERE CASE_ID = V_CASE_ID AND CONTACT_ID = v_CONTACT_ID 
				AND CASE_FILE_ID = v_CASE_FILE_ID;
			END IF;

v_StartTime := clock_timestamp();
		select nextval(&apos;public.sq_actor_serial&apos;) into v_ACTOR_ID;
		INSERT INTO public.CMS_ACTOR
		(	ACTOR_ID,
			CASE_FILE_ID,
			CONT_TYPE_ID,
			CASE_ID,
			CONTACT_ID,
			ACTOR_INACTIVE
		)
		VALUES
		(	v_ACTOR_ID,
			v_CASE_FILE_ID,
			v_CONT_TYPE_ID,
			v_CASE_ID_VAR,  -- CASE_ID OR NULL AS APPROPRIATE SEE ABOVE
			v_CONTACT_ID,
			0::boolean
		);

v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));

	raise notice &apos;ACTOR inserted: %&apos;,  cast(v_ACTOR_ID as character varying(20));

v_StartTime := clock_timestamp();
	INSERT INTO public.CMS_DEFENDANT 
		(
			ACTOR_ID,
			D_OCCUPANCY,
			D_DEFICIENCY_PRESERVED,
			D_DEFICIENCY_SOUGHT,
			DEFICIENCY_REASON_ID,
			D_SERVICE_CODE,
			D_APPEAR_DATE,
			APPEARANCE_TYPE_ID,
			D_CONSENT_REQUESTED,
			D_CONSENT_RECEIVED,
			CONSENT_TYPE_ID,
			D_NOTICE_SENT_STAT,
			D_DEFAULT_NOTICE_SENT,		
			D_DEFAULT_EXPIRED,
			D_DEFAULT_ORDERED,
			D_ORDER_SENT,
			D_COURT_FILE_CHECK,
			D_DEFAULT_ORD_ENT,
			D_DUE_DILIGENCE_AFF_NEEDED,
			D_DUE_DILIGENCE_AFF_RECEIVED,
			D_DUE_DILIGENCE_AFF_FILED,
			D_PLEADING_DATE,
			DEF_SEQ_NUMB
		)
		VALUES
		(
			v_ACTOR_ID,
			v_D_OCCUPANCY,
			v_D_DEFICIENCY_PRESERVED,
			v_D_DEFICIENCY_SOUGHT,
			v_DEFICIENCY_REASON_ID,
			v_D_SERVICE_CODE,
			v_D_APPEAR_DATE,
			v_APPEARANCE_TYPE_ID,
			v_D_CONSENT_REQUESTED,
			v_D_CONSENT_RECEIVED,
			v_CONSENT_TYPE_ID,
			v_D_NOTICE_SENT_STAT,
			v_D_DEFAULT_NOTICE_SENT,		
			v_D_DEFAULT_EXPIRED,
			v_D_DEFAULT_ORDERED,
			v_D_ORDER_SENT,
			v_D_COURT_FILE_CHECK,
			v_D_DEFAULT_ORD_ENT,
			v_D_DUE_DILIGENCE_AFF_NEEDED,
			v_D_DUE_DILIGENCE_AFF_RECEIVED,
			v_D_DUE_DILIGENCE_AFF_FILED,
			v_D_PLEADING_DATE,
			v_D_SEQ_NUMB
		);

v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));

	raise notice &apos;DEFENDANT inserted: %&apos;,  cast(v_ACTOR_ID as character varying(20));

v_StartTime := clock_timestamp();
	SELECT  STATE_ID into v_STATE_ID FROM public.CMS_STATE
			WHERE STATE_CODE = v_STATE_CODE;

		SELECT  COUNTY_ID into v_COUNTY_ID FROM public.CMS_COUNTY
			WHERE COUNTY_NAME = v_COUNTY_NAME AND STATE_ID = v_STATE_ID;

		SELECT  CNTR_ID into v_CNTR_ID FROM public.CMS_COUNTRY 
			WHERE CNTR_NAME = v_COUNTRY_NAME;

		select nextval(&apos;public.sq_address_serial&apos;) into v_ADDRESS_ID;
		INSERT INTO public.CMS_ADDRESS
		(	ADDRESS_ID,
			ADDR_TYPE_ID,
			CONTACT_ID,
			STATE_ID,
			COUNTY_ID,
			ADDRESS_1_LINE,
			ADDRESS_2_LINE,
			ADDRESS_CITY,
			ADDRESS_ZIPCODE,
			ADDRESS_IS_PRIM,
			ADDRESS_TEXT,
			CNTR_ID,
			ADDRESS_LINE_ATTN
		)
		VALUES
		(	v_ADDRESS_ID,
			1,  -- CONTACT
			v_CONTACT_ID,
			v_STATE_ID,
			v_COUNTY_ID,
			v_ADDRESS_1_LINE,
			v_ADDRESS_2_LINE,
			v_ADDRESS_CITY,
			v_ADDRESS_ZIPCODE,
			v_ADDRESS_IS_PRIM,
			v_ADDRESS_TEXT,
			v_CNTR_ID,
			v_ADDRESS_LINE_ATTN
		);
		
v_EndTime := clock_timestamp();
select extract(second from (v_EndTime - v_StartTime)) into v_Diff;
raise notice &apos;  --- v_Diff = %&apos;,  cast(v_Diff as character varying(20));

	raise notice &apos;ADDRESS inserted: %&apos;,  cast(v_ADDRESS_ID as character varying(20));
END$$;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryType">Prepared Update Statement</stringProp>
          <stringProp name="resultVariable">result</stringProp>
          <stringProp name="variableNames">aid</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="49586">200</stringProp>
          </collectionProp>
          <stringProp name="Assertion.custom_message"></stringProp>
          <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">8</intProp>
          <stringProp name="Assertion.scope">all</stringProp>
          <stringProp name="Scope.variable">Result</stringProp>
        </ResponseAssertion>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
